// --- FINAL INTEGRATION AND TESTING ---

// Ensure all required variables are initialized at game load (Technical Improvement)
function initializeGameOnLoad() {
  // Check if saved game exists and show resume button accordingly
  if (localStorage.getItem("hkrpgquiz_save")) {
    document.getElementById('resume-btn').style.display = '';
  } else {
    document.getElementById('resume-btn').style.display = 'none';
  }
  // Pre-load stats and achievements if not already done
  if (!gameStats || !achievements) {
    loadStats();
  }
}

// Function to reset entire game progress (including stats and achievements) - Optional feature (Bug Fixes and Polish)
function resetGameProgress() {
  showConfirmModal("Are you sure you want to reset ALL game progress? This includes stats, achievements, glossary, and saved games.", function() {
    localStorage.removeItem("hkrpgquiz_save");
    localStorage.removeItem("hkrpgquiz_stats");
    localStorage.removeItem("hkrpgquiz_achievements");
    localStorage.removeItem("hkrpgquiz_glossary");
    localStorage.removeItem("hkrpgquiz_game_completed");
    localStorage.removeItem("hkrpgquiz_tutorial_seen");
    glossary = [];
    gameStats = { highScore: 0, totalCorrect: 0, totalGames: 0, totalHints: 0, fastestGame: Infinity, startTime: 0 };
    achievements.forEach(ach => {
      ach.achieved = false;
      if (ach.tracker !== undefined) ach.tracker = 0;
    });
    logMsg("<span style='color:#FFD700'>All game progress reset!</span>");
    document.getElementById('resume-btn').style.display = 'none';
    saveStats();
  });
}

// Add reset progress button to stats modal (Bug Fixes and Polish)
function enhanceStatsModal() {
  let modal = document.getElementById("stats-modal");
  let c = modal.querySelector(".modal-content");
  let achUnlocked = achievements.filter(a => a.achieved).length;
  c.innerHTML = `
    <h3>Game Stats</h3>
    <div style="text-align:left; padding: 0 1em; max-height: 260px; overflow: auto;">
      <p><b>High Score:</b> ${gameStats.highScore}</p>
      <p><b>Total Correct Answers:</b> ${gameStats.totalCorrect}</p>
      <p><b>Games Played:</b> ${gameStats.totalGames}</p>
      <p><b>Total Hints Used:</b> ${gameStats.totalHints}</p>
      <p><b>Fastest Game:</b> ${gameStats.fastestGame === Infinity ? "N/A" : Math.floor(gameStats.fastestGame / 60000) + " min " + Math.floor((gameStats.fastestGame % 60000) / 1000) + " sec"}</p>
      <h4>Achievements Unlocked: ${achUnlocked}/${achievements.length}</h4>
      ${achievements.map(a => `<p><b>${a.name}:</b> ${a.achieved ? "âœ… Unlocked" : "ðŸ”’ Locked"}<br><small>${a.desc}</small></p>`).join("")}
    </div>
    <button id="close-stats-btn">Close</button>
    <button id="reset-progress-btn" style="background: #f85032;">Reset All Progress</button>
  `;
  modal.style.display = "flex";
  c.querySelector("#close-stats-btn").onclick = function() { modal.style.display = "none"; };
  c.querySelector("#reset-progress-btn").onclick = function() {
    modal.style.display = "none";
    resetGameProgress();
  };
  modal.onclick = function(e) { if(e.target===this) this.style.display = "none"; };
}
// Override the previous showStats function with enhanced version
document.getElementById("stats-btn").onclick = enhanceStatsModal;

// Initialize game on page load (Technical Improvement)
window.onload = function() {
  initializeGameOnLoad();
};

// --- TESTING FUNCTIONALITY (Technical Improvement) ---
// Debug function to log current game state for testing purposes (comment out in production)
function debugGameState() {
  console.log("Current Game State:", state);
  console.log("Used Questions:", usedQuestions);
  console.log("Glossary Entries:", glossary.length);
  console.log("Achievements:", achievements);
  console.log("Game Stats:", gameStats);
}
// Uncomment the following line to enable debug logging on game actions (for testing)
// setInterval(debugGameState, 5000);

// Function to simulate game completion for testing achievements (comment out in production)
function simulateGameCompletion() {
  state.npcIndex = npcs.length;
  state.score = 1000;
  correctStreak = 10;
  itemsGivenThisGame = itemList.map(it => it.name);
  gameStats.fastestGame = 240000; // 4 minutes for Speed Demon
  achievements.find(a => a.name === "No Hints Needed").tracker = 10;
  updateAchievements();
  logMsg("<span style='color:#FFD700'>Debug: Simulated game completion for testing!</span>");
}
// Uncomment to test achievements instantly (for testing)
// document.getElementById("start-btn").onclick = function() { startGame(); simulateGameCompletion(); };

// Ensure all keyboard navigation is set up for accessibility (Accessibility Improvement)
function setupGlobalKeyboardNavigation() {
  Array.from(document.querySelectorAll('button')).forEach(btn => {
    btn.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        this.click();
      }
    });
  });
}
// Call on load to ensure all buttons are keyboard-accessible
setupGlobalKeyboardNavigation();
