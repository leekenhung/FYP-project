// --- CSV TO QUESTIONS WITH CULTURAL NOTES (Content and Cultural Depth) ---
function makeQuestionsFromCsv(rows) {
  // group rows by category
  const cats = {};
  for (const row of rows) {
    const [cat, term, meaning, culturalNote, pron] = row.length > 3 ? row : [row[0], row[1], row[2], "", ""];
    if (!cats[cat]) cats[cat] = [];
    cats[cat].push({cat, term:term.trim(), pron:pron.trim() || "", desc:meaning.trim(), culturalNote: culturalNote.trim() || ""});
  }
  // For each entry, create a question with 5 random other terms (from same cat if possible, or all if < 6 in category)
  let allQuestions = [];
  Object.keys(cats).forEach(cat=>{
    const entries = cats[cat];
    for (let i=0;i<entries.length;i++) {
      let q = entries[i];
      // For distractors: other terms from this category, or from all if less than 5 in cat
      let others = entries.filter((e,j)=>j!==i).map(e=>e.term);
      if (others.length<5) {
        let otherTerms = rows.filter(row=>row[1].trim()!==q.term).map(row=>row[1].trim());
        others = others.concat(otherTerms).slice(0,5);
      } else {
        others = shuffle(others).slice(0,5);
      }
      let options = shuffle([q.term,...others]);
      // Add questionType for diversity (Content Enhancement: More Diverse Questions)
      let questionType = Math.random() < 0.7 ? "definition" : (Math.random() < 0.5 ? "situation" : "translation");
      let questionText = q.desc;
      if (questionType === "situation" && cat !== "Boss") {
        questionText = `In what situation would you use this term? <br><br><em>${q.desc.split('.')[0]}.</em>`;
      } else if (questionType === "translation" && cat !== "Boss") {
        questionText = `What is the English meaning of this term? <br><br><em>${q.term}</em>`;
      }
      allQuestions.push({
        cat:cat,
        term:q.term,
        pron:q.pron,
        desc:questionText,
        options: options,
        questionType: questionType,
        culturalNote: q.culturalNote
      });
    }
  });
  // Add a couple of boss questions
  allQuestions.push({
    cat:"Boss",
    type:"desc",
    q:"Which of these terms means 'Red envelope with money, given for luck (especially at Lunar New Year)'?",
    correct:"Lai see",
    options: shuffle(["Lai see","Egg tart","Kung Hei Fat Choy","Jetso","Cha chan teng","Dim sum"]),
    culturalNote: "Did you know? Lai see are traditionally given by married individuals to unmarried ones during Lunar New Year.",
    pron: "",
    desc: "",
    questionType: "definition"
  });
  allQuestions.push({
    cat:"Boss",
    type:"desc",
    q:"Which is a nickname for Hong Kong's trams?",
    correct:"Ding ding",
    options: shuffle(["Ding ding","Cha chan teng","Mahjong","Egg puff","Siu mei","Wonton"]),
    culturalNote: "Did you know? These trams have been running on Hong Kong Island since 1904!",
    pron: "",
    desc: "",
    questionType: "definition"
  });
  allQuestions.push({
    cat:"Boss",
    type:"desc",
    q:"Which phrase means someone is 'very crowded'?",
    correct:"People mountain people sea",
    options: shuffle(["People mountain people sea","Long time no see","Same on you! (Shame on you)","Add oil","Blow water","Must can"]),
    culturalNote: "",
    pron: "",
    desc: "",
    questionType: "definition"
  });
  return allQuestions;
}

// --- RANDOM EVENT TYPES FOR MORE INTERACTIVITY (Gameplay Enhancement: More Interactive Random Events) ---
const randomEventTypes = [
  {text:"Lucky event! Answer 2 questions correctly in a row to win a rare item!", type:"quiz", effect:(state)=>{ /* Handled in maybeRandomEvent */ }},
  {text:"You find a street vendor. Pay 10 points for a mystery item? (Yes/No)", type:"choice", effect:(state, choice)=>{
    if (choice === "yes") {
      if (state.score >= 10) {
        state.score -= 10;
        let remaining = itemList.filter(it=>!itemsGivenThisGame.includes(it.name)&&!state.inventory.some(i=>i.name===it.name));
        if(remaining.length) {
          let it = {...shuffle(remaining)[0]};
          state.inventory.push(it); itemsGivenThisGame.push(it.name);
          logMsg(`<span style="color:#FFD700">Bought item: ${it.emoji} <b>${it.name}</b>!</span>`);
          playSound("item");
          updateInventoryPanel();
        } else {
          logMsg(`<span style="color:#FFD700">Vendor had no new items. Sorry!</span>`);
        }
        updateStats();
      } else {
        logMsg(`<span style="color:#f85032">Not enough points (need 10)!</span>`);
      }
    } else {
      logMsg(`<span style="color:#FFD700">Declined vendor's offer.</span>`);
    }
  }},
  {text:"Memory Challenge! Match the term to its meaning for a bonus!", type:"memory", effect:(state, result)=>{
    if (result === "success") {
      state.score += 15;
      logMsg(`<span style="color:#FFD700">Memory match success! +15 points!</span>`);
      updateStats();
      playSound("item");
    } else {
      logMsg(`<span style="color:#f85032">Memory match failed. No bonus.</span>`);
    }
  }}
];
